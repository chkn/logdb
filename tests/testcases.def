
TEST(Buffers)
{
	logdb_buffer *buf1, *buf2;
	ASSERT(buf1 = logdb_buffer_new_copy ("foo", 3));
	ASSERT(buf2 = logdb_buffer_new_copy ("bar", 3));

	ASSERT(logdb_buffer_append (buf1, buf2));
	ASSERT(6 == logdb_buffer_length (buf1));

	const char* data;
	ASSERT(data = (const char*)logdb_buffer_data (buf1));

	ASSERT(!strncmp (data, "foobar", 6));
	PASS;
}

TEST(OpenCloseConnection)
{
	logdb_connection* conn;

	conn = logdb_open("temp.logdb", LOGDB_OPEN_EXISTING);
	if (conn) {
		logdb_close(conn);
		ASSERTF(0, "temp.logdb should not exist");
	}

	conn = logdb_open("temp.logdb", LOGDB_OPEN_CREATE);
	ASSERT(conn);

	ASSERT(!logdb_close(conn));

	/* We should be able to open it again, no problemo */
	conn = logdb_open("temp.logdb", LOGDB_OPEN_EXISTING);
	ASSERT(conn);

	ASSERT(!logdb_close(conn));

	unlink("temp.logdb");
	PASS;
}

TEST(TransactionBeginRollback)
{
	logdb_connection* conn;
	ASSERT(conn = logdb_open("temp.logdb", LOGDB_OPEN_CREATE));

	/* No active transaction; should not be able to rollback */
	ASSERT(logdb_rollback (conn) != 0);

	ASSERT(logdb_begin (conn) == 0);
	ASSERT(logdb_rollback (conn) == 0);

	/* No active transaction; should not be able to rollback */
	ASSERT(logdb_rollback (conn) != 0);

	ASSERT(!logdb_close(conn));

	unlink("temp.logdb");
	PASS;
}

TEST(Put1)
{
	logdb_connection* conn;
	ASSERT(conn = logdb_open("temp.logdb", LOGDB_OPEN_CREATE));

	logdb_buffer *key, *val;
	ASSERT(key = logdb_buffer_new_direct ("foo", 3, NULL));
	ASSERT(val = logdb_buffer_new_direct ("bar!", 4, NULL));
	ASSERT(3 == logdb_buffer_length (key));
	ASSERT(4 == logdb_buffer_length (val));
	ASSERT(!logdb_put (conn, key, val));
	logdb_buffer_free (key);
	logdb_buffer_free (val);
	
	ASSERT(key = logdb_buffer_new_direct ("hello", 5, NULL));
	ASSERT(val = logdb_buffer_new_direct ("world!", 6, NULL));
	ASSERT(5 == logdb_buffer_length (key));
	ASSERT(6 == logdb_buffer_length (val));
	ASSERT(!logdb_put (conn, key, val));
	logdb_buffer_free (key);
	logdb_buffer_free (val);
	
	logdb_iter* iter;
	ASSERT(iter = logdb_iter_all (conn));
	ASSERT(logdb_iter_next (iter));
	ASSERT(logdb_iter_next (iter));

	ASSERT(key = logdb_iter_current_key (iter));
	ASSERT(val = logdb_iter_current_value (iter));

	ASSERT(5 == logdb_buffer_length (key));
	ASSERT(6 == logdb_buffer_length (val));

	const char* data;
	ASSERT(data = (const char*)logdb_buffer_data (key));
	ASSERT(!strncmp (data, "hello", 5));

	ASSERT(data = (const char*)logdb_buffer_data (val));
	ASSERT(!strncmp (data, "world!", 6));

	ASSERT(!logdb_iter_next (iter));

	logdb_iter_free (iter);
	ASSERT(!logdb_close(conn));
	unlink("temp.logdb");
	PASS;
}

TEST(LogRecovery)
{
	logdb_connection* conn;
	ASSERT(conn = logdb_open("temp.logdb", LOGDB_OPEN_CREATE));
	
	logdb_buffer *key, *val;
	ASSERT(key = logdb_buffer_new_direct ("foo", 3, NULL));
	ASSERT(val = logdb_buffer_new_direct ("bar!", 4, NULL));
	ASSERT(!logdb_put (conn, key, val));
	logdb_buffer_free (key);
	logdb_buffer_free (val);

	ASSERT(!logdb_close(conn));

	ASSERT(!setenv ("LOGDB_TEST_LOG_CREATE_RETURN_EARLY", "1", 1));
	ASSERT(!logdb_open("temp.logdb", LOGDB_OPEN_EXISTING));
	ASSERT(!unsetenv ("LOGDB_TEST_LOG_CREATE_RETURN_EARLY"));
	
	ASSERT(conn = logdb_open("temp.logdb", LOGDB_OPEN_EXISTING));
	
	logdb_iter* iter;
	ASSERT(iter = logdb_iter_all (conn));
	ASSERT(logdb_iter_next (iter));

	ASSERT(key = logdb_iter_current_key (iter));
	ASSERT(val = logdb_iter_current_value (iter));

	ASSERT(3 == logdb_buffer_length (key));
	ASSERT(4 == logdb_buffer_length (val));

	const char* data;
	ASSERT(data = (const char*)logdb_buffer_data (key));
	ASSERT(!strncmp (data, "foo", 3));

	ASSERT(data = (const char*)logdb_buffer_data (val));
	ASSERT(!strncmp (data, "bar!", 4));

	ASSERT(!logdb_iter_next (iter));

	logdb_iter_free (iter);
	
	ASSERT(!logdb_close(conn));
	unlink("temp.logdb");
	PASS;
}
